{"ast":null,"code":"import toast from 'react-hot-toast';\nimport { authenticate } from './hepler.js';\n\n//validate login page username\n\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n  if (values.username) {\n    //chaeck for user existence\n    const {\n      status\n    } = await authenticate(values.username);\n    if (status != 200) {\n      errors.exist = toast.error('user does not exist');\n    }\n  }\n}\n\n//validate password\n\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n//validatr password\nfunction passwordVerify(errors = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password required\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong password...\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 characters\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must contain spl characters\");\n  }\n  return errors;\n}\n\n//validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error('Username required');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid username\");\n  }\n  return error;\n}\n\n//validate reset password\n\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.cnfrm = toast.error(\"Password does not match..!\");\n  }\n  return errors;\n}\n\n//validate regitser form//\n\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n//validate email\n\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"email fiels required\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"wrong email\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    //test->like check\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}","map":{"version":3,"names":["toast","authenticate","usernameValidate","values","errors","usernameVerify","username","status","exist","error","passwordValidate","passwordVerify","specialChars","password","includes","length","test","resetPasswordValidation","confirm_pwd","cnfrm","registerValidation","emailVerify","email","profileValidation"],"sources":["C:/Users/Judith/Downloads/jwt-main/jwt-main/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\nimport { authenticate } from './hepler.js';\n\n\n//validate login page username\n\nexport async function usernameValidate(values)\n{\n    const errors=usernameVerify({},values)\n    if(values.username){\n        //chaeck for user existence\n     const {status}=await authenticate(values.username)\n     if(status!=200){\n    errors.exist=toast.error('user does not exist')\n}\n    }\n}\n\n//validate password\n\nexport async function passwordValidate(values)\n{\n    const errors=passwordVerify({},values);\n    return errors;\n}\n\n//validatr password\nfunction passwordVerify(errors={},values)\n{\n    const specialChars = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?~]/;\n    if(!values.password)\n    {\n        errors.password=toast.error(\"Password required\")\n    }\n    else if(values.password.includes(\" \"))\n    {\n        errors.password=toast.error(\"Wrong password...\")\n    }\n    else if(values.password.length<4)\n    {\n        errors.password=toast.error(\"Password must be more than 4 characters\")\n    }\n    else if(!specialChars.test(values.password))\n    {\n        errors.password=toast.error(\"Password must contain spl characters\")\n    }\n    return errors;\n}\n\n//validate username\nfunction usernameVerify(error={},values)\n{\n    if(!values.username)\n    {\n        error.username=toast.error('Username required');\n        \n    }\n    else if(values.username.includes(\" \"))\n    {\n        error.username=toast.error(\"Invalid username\");\n    }\n\n    return error;\n}\n\n\n//validate reset password\n\nexport async function resetPasswordValidation(values)\n{\n    const errors=passwordVerify({},values);\n\n    if(values.password!==values.confirm_pwd)\n    {\n        errors.cnfrm=toast.error(\"Password does not match..!\")\n    }\n    return errors;\n}\n\n//validate regitser form//\n\nexport async function registerValidation(values)\n{\n    const errors=usernameVerify({},values);\n    passwordVerify(errors,values);\n    emailVerify(errors,values);\n\n    return errors;\n\n\n}\n\n\n//validate email\n\nfunction emailVerify(error={},values)\n{\n    if(!values.email)\n    {\n        error.email=toast.error(\"email fiels required\")\n    }\n\n    else if(values.email.includes(\" \"))\n    {\n        error.email=toast.error(\"wrong email\")\n    }\n    else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){ //test->like check\n        error.email = toast.error(\"Invalid email address...!\")\n    }\n    return error;\n}\n\n\nexport async function profileValidation(values)\n{\n    const errors=emailVerify({},values)\n    return errors;\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}