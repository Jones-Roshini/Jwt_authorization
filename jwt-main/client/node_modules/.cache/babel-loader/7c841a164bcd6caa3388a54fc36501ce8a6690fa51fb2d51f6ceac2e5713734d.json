{"ast":null,"code":"import toast from 'react-hot-toast';\n\n//validate login page username\n\nexport async function usernameValidate(values) {\n  const errors = usernameVerify({}, values);\n}\n\n//validate password\n\nexport async function passwordValidate(values) {\n  const errors = passwordVerify({}, values);\n  return errors;\n}\n\n//validatr password\nfunction passwordVerify(errors = {}, values) {\n  const specialChars = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?~]/;\n  if (!values.password) {\n    errors.password = toast.error(\"Password required\");\n  } else if (values.password.includes(\" \")) {\n    errors.password = toast.error(\"Wrong password...\");\n  } else if (values.password.length < 4) {\n    errors.password = toast.error(\"Password must be more than 4 characters\");\n  } else if (!specialChars.test(values.password)) {\n    errors.password = toast.error(\"Password must contain spl characters\");\n  }\n  return errors;\n}\n\n//validate username\nfunction usernameVerify(error = {}, values) {\n  if (!values.username) {\n    error.username = toast.error('Username required');\n  } else if (values.username.includes(\" \")) {\n    error.username = toast.error(\"Invalid username\");\n  }\n  return error;\n}\n\n//validate reset password\n\nexport async function resetPasswordValidation(values) {\n  const errors = passwordVerify({}, values);\n  if (values.password !== values.confirm_pwd) {\n    errors.cnfrm = toast.error(\"Password does not match..!\");\n  }\n  return errors;\n}\n\n//validate regitser form//\n\nexport async function registerValidation(values) {\n  const errors = usernameVerify({}, values);\n  passwordVerify(errors, values);\n  emailVerify(errors, values);\n  return errors;\n}\n\n//validate email\n\nfunction emailVerify(error = {}, values) {\n  if (!values.email) {\n    error.email = toast.error(\"email fiels required\");\n  } else if (values.email.includes(\" \")) {\n    error.email = toast.error(\"wrong email\");\n  } else if (!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)) {\n    //test->like check\n    error.email = toast.error(\"Invalid email address...!\");\n  }\n  return error;\n}\nexport async function profileValidation(values) {\n  const errors = emailVerify({}, values);\n  return errors;\n}","map":{"version":3,"names":["toast","usernameValidate","values","errors","usernameVerify","passwordValidate","passwordVerify","specialChars","password","error","includes","length","test","username","resetPasswordValidation","confirm_pwd","cnfrm","registerValidation","emailVerify","email","profileValidation"],"sources":["C:/Users/Judith/Downloads/jwt-main/jwt-main/client/src/helper/validate.js"],"sourcesContent":["import toast from 'react-hot-toast'\n\n\n\n//validate login page username\n\nexport async function usernameValidate(values)\n{\n    const errors=usernameVerify({},values)\n}\n\n//validate password\n\nexport async function passwordValidate(values)\n{\n    const errors=passwordVerify({},values);\n    return errors;\n}\n\n//validatr password\nfunction passwordVerify(errors={},values)\n{\n    const specialChars = /[`!@#$%^&*()_+\\-=[\\]{};':\"\\\\|,.<>\\/?~]/;\n    if(!values.password)\n    {\n        errors.password=toast.error(\"Password required\")\n    }\n    else if(values.password.includes(\" \"))\n    {\n        errors.password=toast.error(\"Wrong password...\")\n    }\n    else if(values.password.length<4)\n    {\n        errors.password=toast.error(\"Password must be more than 4 characters\")\n    }\n    else if(!specialChars.test(values.password))\n    {\n        errors.password=toast.error(\"Password must contain spl characters\")\n    }\n    return errors;\n}\n\n//validate username\nfunction usernameVerify(error={},values)\n{\n    if(!values.username)\n    {\n        error.username=toast.error('Username required');\n        \n    }\n    else if(values.username.includes(\" \"))\n    {\n        error.username=toast.error(\"Invalid username\");\n    }\n\n    return error;\n}\n\n\n//validate reset password\n\nexport async function resetPasswordValidation(values)\n{\n    const errors=passwordVerify({},values);\n\n    if(values.password!==values.confirm_pwd)\n    {\n        errors.cnfrm=toast.error(\"Password does not match..!\")\n    }\n    return errors;\n}\n\n//validate regitser form//\n\nexport async function registerValidation(values)\n{\n    const errors=usernameVerify({},values);\n    passwordVerify(errors,values);\n    emailVerify(errors,values);\n\n    return errors;\n\n\n}\n\n\n//validate email\n\nfunction emailVerify(error={},values)\n{\n    if(!values.email)\n    {\n        error.email=toast.error(\"email fiels required\")\n    }\n\n    else if(values.email.includes(\" \"))\n    {\n        error.email=toast.error(\"wrong email\")\n    }\n    else if(!/^[A-Z0-9._%+-]+@[A-Z0-9.-]+\\.[A-Z]{2,4}$/i.test(values.email)){ //test->like check\n        error.email = toast.error(\"Invalid email address...!\")\n    }\n    return error;\n}\n\n\nexport async function profileValidation(values)\n{\n    const errors=emailVerify({},values)\n    return errors;\n\n}"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}